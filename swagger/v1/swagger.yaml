---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/sessions":
    post:
      summary: Creates a session
      tags:
      - Sessions
      parameters: []
      responses:
        '201':
          description: session created
          content:
            application/json:
              examples:
                example_0:
                  value:
                    token: eyJhbGci  ...  9.eyJ1c2VyX2lkIjoxfQ
        '404':
          description: session denied
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Invalid email or password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: object
                  properties:
                    email:
                      type: string
                      example: johndoe@ex.it
                    password:
                      type: string
                      example: password
                  required:
                  - email
                  - password
  "/users":
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 1
                    username: foo
                    name: bar
                    surname: baz
                    birthdate: '2000-01-01'
                    phone_number: '1234567890'
                    email_address: foo@bar.com
                    password: foobar
                    state: foo
                    city: bar
                    address: baz
                    created_at: '2024-03-10T12:00:00Z'
                    updated_at: '2024-03-10T12:00:00Z'
        '422':
          description: invalid request
          content:
            application/json:
              examples:
                example_0:
                  value:
                    errors:
                    - Password can't be blank
                    - Email address can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                      example: john_doe
                    name:
                      type: string
                      example: John
                    surname:
                      type: string
                      example: Doe
                    birthdate:
                      type: string
                      format: date
                    phone_number:
                      type: string
                      example: '1234567890'
                    email_address:
                      type: string
                      example: johndoe@ex.it
                    password:
                      type: string
                      example: password
                    state:
                      type: string
                      example: italy
                    city:
                      type: string
                      example: rome
                    address:
                      type: string
                      example: via roma 1
                  required:
                  - username
                  - name
                  - surname
                  - birthdate
                  - phone_number
                  - email_address
                  - password
                  - state
                  - city
                  - address
    get:
      summary: Retrieves all users
      tags:
      - Users
      responses:
        '200':
          description: Users found
          content:
            application/json:
              examples:
                example_0:
                  value:
                  - id: 1
                    username: foo
                    name: bar
                    surname: baz
                    birthdate: '2000-01-01'
                    phone_number: '1234567890'
                    email_address: foo@bar.com
                    password: foobar
                    state: foo
                    city: bar
                    address: baz
                    created_at: '2024-03-10T12:00:00Z'
                    updated_at: '2024-03-10T12:00:00Z'
        '404':
          description: no table users found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: No users found
    put:
      summary: Updates current user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: user updated
          content:
            application/json:
              examples:
                example_0:
                  value:
                    message: User updated successfully
        '404':
          description: user not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: User not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                    name:
                      type: string
                    surname:
                      type: string
                    birthdate:
                      type: string
                      format: date
                    phone_number:
                      type: string
                    email_address:
                      type: string
                    password:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    address:
                      type: string
    delete:
      summary: Deletes current user
      tags:
      - Users
      responses:
        '200':
          description: user deleted
          content:
            application/json:
              examples:
                example_0:
                  value:
                    message: User deleted successfully
        '404':
          description: user not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: User not found
  "/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 1
                    username: foo
                    name: bar
                    surname: baz
                    birthdate: '2000-01-01'
                    phone_number: '1234567890'
                    email_address: foo@bar.com
                    password: foobar
                    state: foo
                    city: bar
                    address: baz
                    created_at: '2024-03-10T12:00:00Z'
                    updated_at: '2024-03-10T12:00:00Z'
        '404':
          description: user not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: User not found
    put:
      summary: Updates a user
      tags:
      - Admin
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user updated
          content:
            application/json:
              examples:
                example_0:
                  value:
                    message: User updated successfully
        '404':
          description: user not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: User not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                    name:
                      type: string
                    surname:
                      type: string
                    birthdate:
                      type: string
                      format: date
                    phone_number:
                      type: string
                    email_address:
                      type: string
                    password:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    address:
                      type: string
    delete:
      summary: Deletes a user
      tags:
      - Admin
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user deleted
          content:
            application/json:
              examples:
                example_0:
                  value:
                    message: User deleted successfully
        '404':
          description: user not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: User not found
servers:
- url: http://localhost:3000
  description: Main server for API V1
components:
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      in: header
      name: Authorization
security:
- Authorization: []
